// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  username      String    @unique
  password      String
  name          String
  bio           String?
  profileImage  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  posts         Post[] // Posts created by user
  comments      Comment[]
  likes         Like[]
  sessions      Session[]
  polls         Poll[]    // Polls created by user
  pollVotes     PollVote[] 
}

model Post {
  id          String    @id @default(uuid())
  content     String
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  comments    Comment[]
  likes       Like[]
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  posts       Post[]
}

model Comment {
  id          String    @id @default(uuid())
  content     String
  post        Post      @relation(fields: [postId], references: [id])
  postId      String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Like {
  id        String    @id @default(uuid())
  post      Post      @relation(fields: [postId], references: [id])
  postId    String
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime  @default(now())

  @@unique([postId, userId]) // Prevent duplicate likes
}

model Poll {
  id          String      @id @default(uuid())
  question    String
  creator     User        @relation(fields: [creatorId], references: [id])
  creatorId   String
  createdAt   DateTime    @default(now())
  endsAt      DateTime?
  
  options     PollOption[]
  votes       PollVote[]
}

model PollOption {
  id          String      @id @default(uuid())
  text        String
  poll        Poll        @relation(fields: [pollId], references: [id])
  pollId      String
  
  votes       PollVote[]
}

model PollVote {
  id          String      @id @default(uuid())
  option      PollOption  @relation(fields: [optionId], references: [id])
  optionId    String
  poll        Poll        @relation(fields: [pollId], references: [id])
  pollId      String
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime    @default(now())

  @@unique([pollId, userId]) // One vote per poll per user
  @@index([pollId])
}

model Session {
  id          String    @id @default(uuid())
  token       String    @unique
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  createdAt   DateTime  @default(now())
  expiresAt   DateTime

  @@index([token])
}
